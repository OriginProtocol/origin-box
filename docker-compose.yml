version: "3"

networks:
  default:

volumes:
  origin_js_node_modules:
  flask_session: # Flask session persistence
  pg_data:

services:
  postgres:
    container_name: postgres
    restart: always
    image: postgres:10.0
    # Data persistence, comment out the following two lines to disable
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=origin
      - POSTGRES_PASSWORD=origin
      - POSTGRES_DB=origin_bridge
    networks:
      - default

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch
    build:
      context: .
      dockerfile: development/dockerfiles/elasticsearch
    ports:
      - "9200:9200"
    environment:
      network.bind_host: 0
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    ports:
      - "9200:9200"
    networks:
      - default

  origin-js:
    container_name: origin-js
    image: origin-js
    build:
      context: .
      dockerfile: development/dockerfiles/origin-js
    volumes:
      - ./origin-js:/app
      - origin_js_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
    ports:
      - "5002:5002"
      - "8080:8080"
      - "8081:8081" # Tests
      - "8545:8545" # Blockchain
      - "4000:4000" # Apollo server
    # Run npm install on every container start to avoid volumes issue
    # https://github.com/docker/compose/issues/4337
    command: >
      /bin/bash -c "npm install --quiet --no-progress &&
      node scripts/build.js serve"
    networks:
      - default

  origin-messaging-ipfs:
    container_name: origin-messaging-ipfs
    image: origin-messaging-ipfs
    build:
      context: .
      dockerfile: development/dockerfiles/origin-messaging-ipfs
    networks:
      - default
    ports:
      - "5001:5001"
      - "9012:9012"
    environment:
      - IPFS_PATH=/ipfs
    volumes:
      - ./development/.ipfs:/ipfs
    command: "daemon --migrate --enable-pubsub-experiment"

  origin-messaging:
    container_name: origin-messaging
    image: origin-messaging
    build:
      context: .
      dockerfile: development/dockerfiles/origin-messaging
    depends_on:
      - origin-messaging-ipfs
    networks:
      - default
    volumes:
      - ./origin-messaging/src:/app/src
    environment:
      - IPFS_ADDRESS=origin-messaging-ipfs
      - IPFS_PORT=5001
      - MESSAGING_NAMESPACE=dev
    # TODO Add nodemon
    # Waits for origin-messaging-ipfs to be available before starting
    command: /bin/bash -c "wait-for.sh -t 0 -q origin-messaging-ipfs:5001 --
      node_modules/.bin/babel-node src/index.js --presets es2015"

  origin-bridge:
    container_name: origin-bridge
    image: origin-bridge
    build:
      context: .
      dockerfile: development/dockerfiles/origin-bridge
    volumes:
      - ./origin-bridge:/app
      # Set the envfile from the local envfile
      - ./development/envfiles/origin-bridge.env:/app/.env
      - flask_session:/app/flask_session
    depends_on:
      - postgres
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=/app/main.py
      - FLASK_DEBUG=1
    command: flask run --host=0.0.0.0
    networks:
      - default

  origin-dapp:
    container_name: origin-dapp
    image: origin-dapp
    build:
      context: .
      dockerfile: development/dockerfiles/origin-dapp
    volumes:
      # Mount origin-dapp inside the container
      - ./origin-dapp:/app
      # Set the envfile from the local envfile
      - ./development/envfiles/origin-dapp.env:/app/.env
      # Mount compiled origin-js inside node modules
      - ./origin-js:/usr/local/lib/node_modules/origin
      - origin_js_node_modules:/usr/local/lib/node_modules/origin/node_modules
      - ./development/.ipfs:/ipfs
    depends_on:
      - origin-js
      - origin-messaging
      - origin-bridge
    environment:
      - NODE_ENV=development
    ports:
      - "3000:3000"
    command:
      # Waits for origin-js and origin-messaging-ipfs to start then uses a
      # script to read the origin-messaging-ipfs container peer id and write the
      # configuration key/pair to the .env file.
      #
      # The copying is necessary because the .env file is mounted as a volume
      # and the inode is not allowed to change.
      >
      /bin/bash -c "source set-ipfs-swarm.sh /ipfs/config &&
      npm install --quiet --no-progress &&
      npm link origin &&
      wait-for.sh -t 0 -q origin-js:8081 --
      node node_modules/webpack-dev-server/bin/webpack-dev-server.js --host 0.0.0.0 --watch-poll 500"
    networks:
      - default
