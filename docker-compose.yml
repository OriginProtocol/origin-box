version: "3"

networks:
  default:

volumes:
  origin_js_node_modules:
  flask_session: # Flask session persistence
  pg_data:

services:
  postgres:
    container_name: postgres
    restart: always
    image: postgres:10.0
    # Data persistence, comment out the following two lines to disable
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=origin
      - POSTGRES_PASSWORD=origin
      - POSTGRES_DB=origin-indexing
    networks:
      - default

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch
    build:
      context: .
      dockerfile: development/dockerfiles/elasticsearch
    ports:
      - "9200:9200"
    environment:
      network.bind_host: 0
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - default

  origin-js:
    container_name: origin-js
    image: origin-js
    build:
      context: .
      dockerfile: development/dockerfiles/origin-js
    volumes:
      - ./origin-js:/app
      - origin_js_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
    ports:
      - "5002:5002"
      - "8080:8080"
      - "8081:8081" # Tests
      - "8545:8545" # Blockchain
    # Run npm install on every container start to avoid volumes issue
    # https://github.com/docker/compose/issues/4337
    command: >
      /bin/bash -c "npm install --quiet --no-progress &&
      node scripts/build.js serve"
    networks:
      - default

  origin-discovery:
    container_name: origin-discovery
    image: origin-discovery
    volumes:
      - ./origin-js/daemon/indexing:/app
    build:
      context: .
      dockerfile: development/dockerfiles/origin-discovery
    volumes:
      - ./origin-js/daemon/indexing:/app
      # Mount compiled origin-js inside node modules, this is not actually a
      # dependency of the graphql server, but it is required here because the
      # event-listener and origin-discovery share the same package.json
      - ./origin-js:/usr/local/lib/node_modules/origin
      - origin_js_node_modules:/usr/local/lib/node_modules/origin/node_modules
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=origin
      - DATABASE_PASSWORD=origin
      - DATABASE_NAME=origin-indexing
      - ELASTICSEARCH_HOST=elasticsearch:9200
    depends_on:
      - origin-js
      - postgres
      - elasticsearch
    ports:
      - "4000:4000" # Apollo
    command: >
      /bin/bash -c "wait-for.sh -t 0 -q origin-js:8081 --
      npm install --quiet --no-progress &&
      npm link origin &&
      node apollo/index.js"
    networks:
      - default

  event-listener:
    container_name: event-listener
    image: event-listener
    build:
      context: .
      dockerfile: development/dockerfiles/event-listener
    volumes:
      - ./origin-js/daemon/indexing:/app
      # Mount compiled origin-js inside node modules
      - ./origin-js:/usr/local/lib/node_modules/origin
      - origin_js_node_modules:/usr/local/lib/node_modules/origin/node_modules
    depends_on:
      - origin-js
      - postgres
      - elasticsearch
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=origin
      - DATABASE_PASSWORD=origin
      - DATABASE_NAME=origin-indexing
      - ELASTICSEARCH_HOST=elasticsearch:9200
    command: >
      /bin/bash -c "npm install --quiet --no-progress &&
      npm link origin &&
      wait-for.sh -t 0 -q origin-js:8081 --
      node node_modules/db-migrate/bin/db-migrate up -e origin-box &&
      node listener/listener.js --elasticsearch --db --web3-url='http://origin-js:8545'"
    networks:
      - default

  origin-messaging:
    container_name: origin-messaging
    image: origin-messaging
    build:
      context: .
      dockerfile: development/dockerfiles/origin-messaging
    ports:
      - "9012:9012"
    volumes:
      - ./origin-messaging/src:/app/src
      - ./development/.ipfs:/ipfs
    environment:
      - MESSAGING_NAMESPACE=dev
    networks:
      - default
    # TODO Add nodemon
    # Waits for origin-messaging-ipfs to be available before starting
    command: node_modules/.bin/babel-node src/index.js --presets es2015

  origin-bridge:
    container_name: origin-bridge
    image: origin-bridge
    build:
      context: .
      dockerfile: development/dockerfiles/origin-bridge
    volumes:
      - ./origin-bridge:/app
      # Set the envfile from the local envfile
      - ./development/envfiles/origin-bridge.env:/app/.env
      - flask_session:/app/flask_session
    depends_on:
      - postgres
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=/app/main.py
      - FLASK_DEBUG=1
    command: flask run --host=0.0.0.0
    networks:
      - default

  origin-dapp:
    container_name: origin-dapp
    image: origin-dapp
    build:
      context: .
      dockerfile: development/dockerfiles/origin-dapp
    volumes:
      # Mount origin-dapp inside the container
      - ./origin-dapp:/app
      # Set the envfile from the local envfile
      - ./development/envfiles/origin-dapp.env:/app/.env
      # Mount compiled origin-js inside node modules
      - ./origin-js:/usr/local/lib/node_modules/origin
      - origin_js_node_modules:/usr/local/lib/node_modules/origin/node_modules
      - ./development/.ipfs:/ipfs
    depends_on:
      - origin-js
      - origin-messaging
      - origin-bridge
    environment:
      - NODE_ENV=development
    ports:
      - "3000:3000"
    command:
      # Waits for origin-messaging to start then uses a script to read the
      # origin-messaging IPFS peer id and write the configuration key/pair to
      # the .env file.
      #
      # The copying is necessary because the .env file is mounted as a volume
      # and the inode is not allowed to change.
      >
      /bin/bash -c "wait-for.sh -t 0 -q origin-messaging:9012 --
      source set-ipfs-swarm.sh /ipfs/config &&
      npm install --quiet --no-progress &&
      npm link origin &&
      wait-for.sh -t 0 -q origin-js:8081 --
      node node_modules/webpack-dev-server/bin/webpack-dev-server.js --host 0.0.0.0 --watch-poll 500"
    networks:
      - default
