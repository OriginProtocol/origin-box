# This deployment is for a geth miner for the Ethereum private network

{{- if eq .Release.Namespace "dev" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "ethereum.fullname" . }}-miner-node
  labels:
    app: {{ template "ethereum.fullname" . }}-miner-node
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.gethMinerReplicas }}
  serviceName: {{ template "ethereum.fullname" . }}-miner-node
  selector:
    matchLabels:
      app: {{ template "ethereum.fullname" . }}-miner-node
  template:
    metadata:
      labels:
        app: {{ template "ethereum.fullname" . }}-miner-node
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: geth-miner
        image: {{ .Values.gethImage }}:{{ .Values.gethImageTag }}
        ports:
        - name: discovery-udp
          containerPort: 30303
          protocol: UDP
        - name: discovery-tcp
          containerPort: 30303
        command: ["/bin/sh"]
        args:
        - "-c"
        - "geth
          --bootnodes=`cat /root/.ethereum/bootnodes`
          --mine
          --etherbase=0
          --networkid=${NETWORK_ID}
          --ethstats=${HOSTNAME}:${ETHSTATS_SECRET}@${ETHSTATS_SERVICE}"
        env:
        - name: ETHSTATS_SERVICE
          value: {{ template "ethereum.fullname" . }}-ethstats.{{ .Release.Namespace }}.svc.cluster.local
        - name: ETHSTATS_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "ethereum.fullname" . }}-ethstats
              key: WS_SECRET
        - name: NETWORK_ID
          valueFrom:
            configMapKeyRef:
              name: {{ template "ethereum.fullname" . }}-genesis-config
              key: networkid
        resources:
          requests:
            memory: 2Gi
          limits:
            cpu: {{ .Values.gethMinerCpuLimit | quote }}
        volumeMounts:
          - name: {{ template "ethereum.fullname" . }}-data
            mountPath: /root/.ethereum
      initContainers:
      - name: init-genesis
        image: {{ .Values.gethImage }}:{{ .Values.gethImageTag }}
        args:
          - "init"
          - "/etc/geth/genesis.json"
        volumeMounts:
          - name: {{ template "ethereum.fullname" . }}-data
            mountPath: /root/.ethereum
          - name: genesis-config
            mountPath: /etc/geth/
      {{- if .Values.gethAccountPrivateKey }}
      - name: import-geth-account
        image: {{ .Values.gethImage }}:{{ .Values.gethImageTag }}
        command: ["/bin/sh"]
        args:
        - "-c"
        - |-
{{ .Files.Get "scripts/import-account.sh" | indent 10 }}
        volumeMounts:
        - name: {{ template "ethereum.fullname" . }}-data
          mountPath: /root/.ethereum
        - name: account
          readOnly: true
          mountPath: /root/.ethereum/account
      {{- end }}
      - name: get-bootnodes
        image: {{ .Values.gethImage }}:{{ .Values.gethImageTag }}
        command: ["/bin/sh"]
        args:
        - "-c"
        - |-
{{ .Files.Get "scripts/get-bootnode.sh" | indent 10 }}
        env:
        - name: BOOTNODE_SERVICE
          value: {{ template "ethereum.fullname" . }}-bootnode.{{ .Release.Namespace }}
        volumeMounts:
        - name: {{ template "ethereum.fullname" . }}-data
          mountPath: /geth
      volumes:
      - name: genesis-config
        configMap:
          name: {{ template "ethereum.fullname" . }}-genesis-config
      - name: account
        secret:
          secretName: {{ template "ethereum.fullname" . }}-account
  volumeClaimTemplates:
    - metadata:
        name: {{ template "ethereum.fullname" . }}-data
      spec:
        storageClassName: "standard"
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
              storage: 5Gi
{{- end }}
