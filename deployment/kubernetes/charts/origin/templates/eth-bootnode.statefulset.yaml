# Bootnode is used for private Ethereum blockchain
# It only gets installed in the dev namespace

{{- if eq .Release.Namespace "dev" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "ethereum.fullname" . }}-bootnode
  labels:
    app: {{ template "ethereum.fullname" . }}-bootnode
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "ethereum.fullname" . }}-bootnode
  template:
    metadata:
      labels:
        app: {{ template "ethereum.fullname" . }}-bootnode
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
    spec:
      containers:
      - name: bootnode
        image: {{ .Values.bootnodeImage }}:{{ .Values.bootnodeImageTag }}
        command: ["/bin/sh"]
        args:
          - "-c"
          - "bootnode --nodekey=/etc/bootnode/node.key --verbosity=4"
        volumeMounts:
        - name: {{ template "ethereum.fullname" . }}-bootnode
          mountPath: /etc/bootnode
        ports:
        - name: discovery
          containerPort: 30301
          protocol: UDP
      - name: bootnode-server
        image: {{ .Values.bootnodeImage }}:{{ .Values.bootnodeImageTag }}
        command: ["/bin/sh"]
        args:
        - "-c"
        - "while [ 1 ]; do echo -e \"HTTP/1.1 200 OK\n\nenode://$(bootnode -writeaddress --nodekey=/etc/bootnode/node.key)@$(POD_IP):30301\" | nc -l -v -p 80 || break; done;"
        volumeMounts:
        - name: {{ template "ethereum.fullname" . }}-bootnode
          mountPath: /etc/bootnode
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 80
      initContainers:
      # Generate a nodekey for the bootnode
      # TODO only do this if not already done
      - name: bootnode-genkey
        image: {{ .Values.bootnodeImage }}:{{ .Values.bootnodeImageTag }}
        command: ["/bin/sh"]
        args:
        - "-c"
        - "bootnode --genkey=/etc/bootnode/node.key"
        volumeMounts:
        - name: {{ template "ethereum.fullname" . }}-bootnode
          mountPath: /etc/bootnode
  volumeClaimTemplates:
    - metadata:
        name: {{ template "ethereum.fullname" . }}-bootnode
      spec:
        storageClassName: "standard"
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
{{- end }}
